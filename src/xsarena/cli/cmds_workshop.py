from __future__ import annotations

import asyncio
import json
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console

from ..utils.text import slugify
from .context import CLIContext


console = Console()

app = typer.Typer(help="Workshop design and facilitation tools")


@app.command("design")
def workshop_design(
    topic: str = typer.Argument(..., help="Topic or subject for the workshop"),
    duration: str = typer.Option(
        "60 minutes", "--duration", "-d", help="Duration of the workshop"
    ),
    out_file: Path = typer.Option(
        None, "--out", "-o", help="Output file path for the agenda JSON"
    ),
):
    """Design a workshop agenda by combining role.workshop_architect and prompt.workshop_agenda.json.md"""

    # Load the workshop architect role
    role_path = Path("directives/roles/role.workshop_architect.md")
    if not role_path.exists():
        typer.echo(f"Error: Role file not found at {role_path}")
        raise typer.Exit(code=1)

    role_path.read_text(encoding="utf-8")

    # Load the workshop agenda prompt
    prompt_path = Path(
        "directives/prompt.workshop_agenda.json.md"
    )  # Fixed path - no extra 'prompt/' directory
    if not prompt_path.exists():
        typer.echo(f"Error: Prompt file not found at {prompt_path}")
        raise typer.Exit(code=1)

    prompt_path.read_text(encoding="utf-8")

    # Prepare context for the roleplay

    # Create output file if not provided
    if out_file is None:
        # Generate a safe slug for the filename using the shared slugify function
        slug = slugify(topic, default="workshop")
        out_file = Path("review") / f"{slug}_agenda.json"

    # Ensure the output directory exists
    out_file.parent.mkdir(parents=True, exist_ok=True)

    # For now, let's just create a sample JSON output since we can't run the full AI pipeline
    # In a real implementation, this would call the actual AI engine
    sample_agenda = {
        "topic": topic,
        "duration": duration,
        "agenda": [
            {"time": "0-5 min", "activity": "Introduction and objectives"},
            {"time": "5-15 min", "activity": "Icebreaker activity"},
            {"time": "15-30 min", "activity": "Main content presentation"},
            {"time": "30-45 min", "activity": "Interactive exercise"},
            {"time": "45-55 min", "activity": "Wrap-up and Q&A"},
            {"time": "55-60 min", "activity": "Action items and next steps"},
        ],
    }

    # Write the sample agenda to the output file
    out_file.write_text(json.dumps(sample_agenda, indent=2), encoding="utf-8")
    typer.echo(f"Workshop agenda saved to: {out_file}")
    typer.echo(
        "Note: This is a sample agenda. In a full implementation, this would be generated by AI using the role and prompt files."
    )

    console.print(
        f"\nNext step: Run `xsarena workshop script {out_file}` to generate the facilitator's script."
    )


@app.command("script")
def workshop_script(
    ctx: typer.Context,
    agenda_file: Path = typer.Argument(
        ..., help="Path to the workshop agenda JSON file.", exists=True, readable=True
    ),
    out_file: Optional[Path] = typer.Option(
        None, "--out", "-o", help="Output path for the Markdown script."
    ),
):
    """Generate a facilitator script from a structured workshop agenda."""
    cli: CLIContext = ctx.obj

    role_path = Path("directives/roles/role.facilitator_script_writer.md")
    if not role_path.exists():
        console.print(
            "[red]Error: Missing required directive (role.facilitator_script_writer.md).[/red]"
        )
        raise typer.Exit(1)

    try:
        agenda_content = agenda_file.read_text(encoding="utf-8")
        json.loads(agenda_content)  # sanity check JSON
        console.print(f"Loaded agenda from [bold]{agenda_file}[/bold]")
    except Exception as e:
        console.print(f"[red]Error loading or parsing agenda file: {e}[/red]")
        raise typer.Exit(1)

    system_prompt = role_path.read_text(encoding="utf-8")
    user_prompt = f"""
Here is the workshop agenda in JSON format. Please generate a complete, detailed facilitator script based on this plan.
The script should be in Markdown, including timings, key talking points, instructions for activities, and transition phrases.

WORKSHOP AGENDA:
```json
{agenda_content}
```

Generate the full script now.
"""

    console.print("Generating facilitator script... (this may take a moment)")
    response_text = asyncio.run(
        cli.engine.send_and_collect(user_prompt, system_prompt=system_prompt)
    )

    if out_file is None:
        out_file = agenda_file.with_suffix(".script.md")
    out_file.write_text(response_text, encoding="utf-8")
    console.print("[green]✓ Facilitator script successfully generated![/green]")
    console.print(f"  → Saved to [bold]{out_file}[/bold]")
